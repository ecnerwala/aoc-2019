from functools import *
from collections import *
from itertools import *
from math import *
from sys import exit
from dataclasses import dataclass
import re
from builtins import pow
from heapq import heappush, heappop, heappushpop, heapify, heapreplace
import pyperclip


def cprint(a):
    print(a)
    pyperclip.copy(a)

class NeedInput_():
    pass

NeedInput = NeedInput_()


class Computer():
    def __init__(self, prog):
        self.mem = defaultdict(lambda: 0)
        for i,v in enumerate(prog):
            self.mem[i] = v
        self.pc = 0
        self.out = []
        self.relative_base = 0
        self.halted = False

        self.out_ctr = 0


    def run_with_inp(self, inp=None):
        if self.halted: return self

        if inp is None: inp = []

        inp = iter(inp)
        while True:
            instr = self.mem[self.pc]
            op = instr % 100
            instr //= 100

            next_pc = self.pc+1

            def get_param():
                nonlocal next_pc
                nonlocal instr
                v = self.mem[next_pc]
                next_pc += 1
                mode = instr % 10
                instr //= 10
                return (mode, v)
            def get_read_param():
                mode, v = get_param()
                if mode == 0:
                    return self.mem[v]
                elif mode == 1:
                    return v
                elif mode == 2:
                    addr = self.relative_base + v
                    assert 0 <= addr
                    return self.mem[addr]
                else: assert False
            def get_write_addr():
                mode, v = get_param()
                if mode == 0:
                    return v
                elif mode == 1:
                    assert False
                elif mode == 2:
                    addr = self.relative_base + v
                    assert 0 <= addr
                    return addr
                else: assert False

            def do_jump(loc):
                self.pc = loc

            if op == 99:
                self.halted = True
                return self
            elif op == 1:
                s1 = get_read_param()
                s2 = get_read_param()
                d = get_write_addr()
                self.mem[d] = s1 + s2
            elif op == 2:
                s1 = get_read_param()
                s2 = get_read_param()
                d = get_write_addr()
                self.mem[d] = s1 * s2
            elif op == 3:
                try:
                    v = next(inp)
                except StopIteration:
                    return self
                d = get_write_addr()
                self.mem[d] = v
            elif op == 4:
                s = get_read_param()
                self.out.append(s)
            elif op == 5:
                s1 = get_read_param()
                s2 = get_read_param()
                if s1 != 0:
                    next_pc = s2
            elif op == 6:
                s1 = get_read_param()
                s2 = get_read_param()
                if s1 == 0:
                    next_pc = s2
            elif op == 7:
                s1 = get_read_param()
                s2 = get_read_param()
                d = get_write_addr()
                self.mem[d] = (1 if s1 < s2 else 0)
            elif op == 8:
                s1 = get_read_param()
                s2 = get_read_param()
                d = get_write_addr()
                self.mem[d] = (1 if s1 == s2 else 0)
            elif op == 9:
                s1 = get_read_param()
                self.relative_base += s1
            else: assert False

            self.pc = next_pc

    def pop_output(self, l=None):
        if l is None:
            return self.pop_output(1)[0]
        assert l + self.out_ctr <= len(self.out)
        self.out_ctr += l
        return self.out[self.out_ctr-l:self.out_ctr]

    def has_output(self, l=1):
        return self.out_ctr + l <= len(self.out)


def main(inp, is_real):
    if not is_real: return

    inp = inp.strip()
    inp = inp.split(',')

    prog = tuple(map(int, inp))

    comp = Computer(prog)
    assert comp.mem[0] == 1
    comp.mem[0] = 2
    comp.run_with_inp()

    main = ['A', 'B', 'A', 'C', 'A', 'B', 'C', 'A', 'B', 'C']
    # 8, 10, 10, 4, 8, 10, 12, 8, 10, 10, 12, 4
    # R 8 R 10 R 10 R 4 R 8 R 10 R 12 R 8 R 10 R 10 R 12 R 4 
    a = ['R', 8, 'R', 10, 'R', 10]
    b = ['R', 4, 'R', 8, 'R', 10, 'R', 12]
    c = ['R', 12, 'R', 4, 'L', 12, 'L', 12]
    extra = ['n']
    inp_str = ''.join(','.join(map(str, cmd)) + '\n' for cmd in [main, a, b, c, extra])
    for a in inp_str.split('\n'):
        print(a, len(a))
    comp.run_with_inp(list(map(ord, inp_str)))

    resp = ''.join(map(chr, comp.out))
    print(resp)

    grid = ''.join(map(chr, comp.out))
    grid = [list(v == '#' for v in x) for x in grid.strip().split()]
    ans = 0


    cprint(comp.out[-1])
    #exit(0)

# R 8 R 10 R 10
# R 4 R 8 R 10 R 12
# R 8 R 10 R 10
# R 12 R 4 L 12 L 12
# R 8 R 10 R 10 R 4 R 8 R 10 R 12
# R 12 R 4 L 12 L 12
# R 8 R 10 R 10 R 4 R 8 R 10 R 12
# R 12 R 4 L 12 L 12


grid = """
............................^########
....................................#
....................................#
....................................#
....................................#
....................................#
..........................#########.#
..........................#.......#.#
......................###########.#.#
......................#...#.....#.#.#
..#############.......#...###########
..#...........#.......#.........#.#..
..#...........#.......#.........#.#..
..#...........#.......#.........#.#..
..#.....#############.#.........#.#..
..#.....#.....#.....#.#.........#.#..
###########...#.....#.#############..
#.#.....#.#...#.....#...........#....
#.#.....#.#...#.....#############....
#.#.....#.#...#......................
#.#########...#...............#......
#.......#.....#...............#......
#.......#.#####...............#......
#.......#.#...................#......
#.......#.#...................#......
#.......#.#...................#......
#########.#...................#......
..........#...................#......
......#############...........#......
......#...#.......#...........#......
......#...#.......#...........#......
......#...#.......#...........#......
......#...#.#####.#############......
......#...#.#...#....................
......#...#############..............
......#.....#...#.....#..............
......#.....#...#.....#..............
......#.....#...#.....#..............
......#.....#...#.....#..............
......#.....#...#.....#..............
......###########.....#..............
............#.........#..............
............###########..............
"""

samp_inp = r"""
"""

real_inp = r"""
1,330,331,332,109,3072,1101,1182,0,16,1101,1481,0,24,102,1,0,570,1006,570,36,1002,571,1,0,1001,570,-1,570,1001,24,1,24,1105,1,18,1008,571,0,571,1001,16,1,16,1008,16,1481,570,1006,570,14,21101,0,58,0,1105,1,786,1006,332,62,99,21101,333,0,1,21102,1,73,0,1105,1,579,1102,1,0,572,1101,0,0,573,3,574,101,1,573,573,1007,574,65,570,1005,570,151,107,67,574,570,1005,570,151,1001,574,-64,574,1002,574,-1,574,1001,572,1,572,1007,572,11,570,1006,570,165,101,1182,572,127,101,0,574,0,3,574,101,1,573,573,1008,574,10,570,1005,570,189,1008,574,44,570,1006,570,158,1106,0,81,21102,1,340,1,1105,1,177,21101,0,477,1,1105,1,177,21102,1,514,1,21102,1,176,0,1105,1,579,99,21101,0,184,0,1105,1,579,4,574,104,10,99,1007,573,22,570,1006,570,165,1002,572,1,1182,21101,0,375,1,21101,211,0,0,1105,1,579,21101,1182,11,1,21102,222,1,0,1106,0,979,21102,1,388,1,21102,1,233,0,1106,0,579,21101,1182,22,1,21101,0,244,0,1106,0,979,21102,401,1,1,21102,1,255,0,1105,1,579,21101,1182,33,1,21101,266,0,0,1106,0,979,21101,414,0,1,21102,277,1,0,1105,1,579,3,575,1008,575,89,570,1008,575,121,575,1,575,570,575,3,574,1008,574,10,570,1006,570,291,104,10,21102,1182,1,1,21102,313,1,0,1105,1,622,1005,575,327,1101,1,0,575,21101,0,327,0,1105,1,786,4,438,99,0,1,1,6,77,97,105,110,58,10,33,10,69,120,112,101,99,116,101,100,32,102,117,110,99,116,105,111,110,32,110,97,109,101,32,98,117,116,32,103,111,116,58,32,0,12,70,117,110,99,116,105,111,110,32,65,58,10,12,70,117,110,99,116,105,111,110,32,66,58,10,12,70,117,110,99,116,105,111,110,32,67,58,10,23,67,111,110,116,105,110,117,111,117,115,32,118,105,100,101,111,32,102,101,101,100,63,10,0,37,10,69,120,112,101,99,116,101,100,32,82,44,32,76,44,32,111,114,32,100,105,115,116,97,110,99,101,32,98,117,116,32,103,111,116,58,32,36,10,69,120,112,101,99,116,101,100,32,99,111,109,109,97,32,111,114,32,110,101,119,108,105,110,101,32,98,117,116,32,103,111,116,58,32,43,10,68,101,102,105,110,105,116,105,111,110,115,32,109,97,121,32,98,101,32,97,116,32,109,111,115,116,32,50,48,32,99,104,97,114,97,99,116,101,114,115,33,10,94,62,118,60,0,1,0,-1,-1,0,1,0,0,0,0,0,0,1,28,0,0,109,4,1202,-3,1,587,20101,0,0,-1,22101,1,-3,-3,21101,0,0,-2,2208,-2,-1,570,1005,570,617,2201,-3,-2,609,4,0,21201,-2,1,-2,1106,0,597,109,-4,2106,0,0,109,5,1202,-4,1,630,20102,1,0,-2,22101,1,-4,-4,21102,0,1,-3,2208,-3,-2,570,1005,570,781,2201,-4,-3,652,21001,0,0,-1,1208,-1,-4,570,1005,570,709,1208,-1,-5,570,1005,570,734,1207,-1,0,570,1005,570,759,1206,-1,774,1001,578,562,684,1,0,576,576,1001,578,566,692,1,0,577,577,21101,0,702,0,1105,1,786,21201,-1,-1,-1,1106,0,676,1001,578,1,578,1008,578,4,570,1006,570,724,1001,578,-4,578,21102,731,1,0,1105,1,786,1106,0,774,1001,578,-1,578,1008,578,-1,570,1006,570,749,1001,578,4,578,21102,1,756,0,1105,1,786,1106,0,774,21202,-1,-11,1,22101,1182,1,1,21101,0,774,0,1106,0,622,21201,-3,1,-3,1106,0,640,109,-5,2106,0,0,109,7,1005,575,802,20102,1,576,-6,20102,1,577,-5,1105,1,814,21101,0,0,-1,21101,0,0,-5,21101,0,0,-6,20208,-6,576,-2,208,-5,577,570,22002,570,-2,-2,21202,-5,37,-3,22201,-6,-3,-3,22101,1481,-3,-3,1201,-3,0,843,1005,0,863,21202,-2,42,-4,22101,46,-4,-4,1206,-2,924,21101,1,0,-1,1106,0,924,1205,-2,873,21102,1,35,-4,1106,0,924,1201,-3,0,878,1008,0,1,570,1006,570,916,1001,374,1,374,2101,0,-3,895,1102,2,1,0,2102,1,-3,902,1001,438,0,438,2202,-6,-5,570,1,570,374,570,1,570,438,438,1001,578,558,921,21002,0,1,-4,1006,575,959,204,-4,22101,1,-6,-6,1208,-6,37,570,1006,570,814,104,10,22101,1,-5,-5,1208,-5,43,570,1006,570,810,104,10,1206,-1,974,99,1206,-1,974,1101,0,1,575,21101,0,973,0,1106,0,786,99,109,-7,2105,1,0,109,6,21101,0,0,-4,21101,0,0,-3,203,-2,22101,1,-3,-3,21208,-2,82,-1,1205,-1,1030,21208,-2,76,-1,1205,-1,1037,21207,-2,48,-1,1205,-1,1124,22107,57,-2,-1,1205,-1,1124,21201,-2,-48,-2,1105,1,1041,21102,-4,1,-2,1105,1,1041,21101,-5,0,-2,21201,-4,1,-4,21207,-4,11,-1,1206,-1,1138,2201,-5,-4,1059,1201,-2,0,0,203,-2,22101,1,-3,-3,21207,-2,48,-1,1205,-1,1107,22107,57,-2,-1,1205,-1,1107,21201,-2,-48,-2,2201,-5,-4,1090,20102,10,0,-1,22201,-2,-1,-2,2201,-5,-4,1103,1201,-2,0,0,1106,0,1060,21208,-2,10,-1,1205,-1,1162,21208,-2,44,-1,1206,-1,1131,1105,1,989,21101,439,0,1,1105,1,1150,21102,1,477,1,1106,0,1150,21101,514,0,1,21101,0,1149,0,1105,1,579,99,21101,1157,0,0,1105,1,579,204,-2,104,10,99,21207,-3,22,-1,1206,-1,1138,1201,-5,0,1176,2101,0,-4,0,109,-6,2106,0,0,28,9,36,1,36,1,36,1,36,1,36,1,26,9,1,1,26,1,7,1,1,1,22,11,1,1,1,1,22,1,3,1,5,1,1,1,1,1,2,13,7,1,3,11,2,1,11,1,7,1,9,1,1,1,4,1,11,1,7,1,9,1,1,1,4,1,11,1,7,1,9,1,1,1,4,1,5,13,1,1,9,1,1,1,4,1,5,1,5,1,5,1,1,1,9,1,1,1,2,11,3,1,5,1,1,13,2,1,1,1,5,1,1,1,3,1,5,1,11,1,4,1,1,1,5,1,1,1,3,1,5,13,4,1,1,1,5,1,1,1,3,1,22,1,1,9,3,1,15,1,6,1,7,1,5,1,15,1,6,1,7,1,1,5,15,1,6,1,7,1,1,1,19,1,6,1,7,1,1,1,19,1,6,1,7,1,1,1,19,1,6,9,1,1,19,1,16,1,19,1,12,13,11,1,12,1,3,1,7,1,11,1,12,1,3,1,7,1,11,1,12,1,3,1,7,1,11,1,12,1,3,1,1,5,1,13,12,1,3,1,1,1,3,1,26,1,3,13,20,1,5,1,3,1,5,1,20,1,5,1,3,1,5,1,20,1,5,1,3,1,5,1,20,1,5,1,3,1,5,1,20,1,5,1,3,1,5,1,20,11,5,1,26,1,9,1,26,11,14
"""

print("Sample:")
main(samp_inp, False)

print("Actual:")
main(real_inp, True)
